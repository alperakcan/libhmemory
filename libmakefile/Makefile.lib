# 
# Makefile.lib 
#
# version   : 2.0.4
# copyright : 2002 - 2013 by Alper Akcan
# email     : alper.akcan@gmail.com
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#

# Changelog :
#
#   20080622 - target_depends-y fixes
#   20090210 - added c++ support
#   20100223 - depend file do not depend temp directories
#   20100319 - files depends to Makefile located in their folder
#   20100407 - can handle multiple jobs
#   20130325 - added missin targets for host

#
# Example
# -------
# 
#     target-y  = target1
#     target-y += target2
# 
#     target1_files-y = target_file_shared.c \
#                       target1_file_2.c \
#                       target1_file_3.c
#     target1_includes-y = ./ \
#                          /opt/include
#     target1_libraries-y = ./ \
#                           /opt/lib
#     target1_cflags-y = -DUSER_DEFINED \
#                        -O2
#     target1_ldflags-y = -luserdefined
# 
#     target2_files-y = target_file_shared.c \
#                       target2_file_2.c \
#                       target2_file_3.c
#     target2_includes-y = ./ \
#                          /opt/include
#     target2_libraries-y = ./ \
#                           /opt/lib
#     target2_cflags-y = -DUSER_DEFINED \
#                        -O2
#     target2_ldflags-y = -luserdefined
# 
#     include Makefile.lib
#

#
# Overview
# --------
# 
# you can have more than one target, just add targets as you wish. you can
# share files among targets, files will be compiled for each target with
# approtiate flags.
# 
# in addition targets may depend each other, so if your target depends on
# target.so just add target.so to target's depend list with;
# 
#    target_depends-y = target.so
# 
# targets may also depend to the subdirectories, so target commands will
# not be executed until subdirs commands get executed.
# 
# some usefull files are created in make process, for debugging and for speedup
# 
#     .target/*.dep              : includes depend information for the file
#     .target/*.dep.cmd          : the command used for generating .dep file
#     .target/*.o                : object for the file
#     .target/*.o.cmd            : the command used for creating the object
#     .target/target[a,so,o]     : the target
#     .target/target[a,so,o].cmd : the command used for creating the target
#     target                     : the target
#

#
# Available Targets
# -----------------
# 
#     target-[y,n, ]    : a binary target.
#                         target will be created with $(CC) -o
#     target.o-[y,n, ]  : an object target.
#                         target.o will be created with $(LD) -r -o
#     target.a-[y,n, ]  : a static library target.
#                         target.a will be created with $(AR)
#     target.so-[y,n, ] : a shared library target.
#                         target.so will be created with $(CC) -o -shared
# 
#     target.host-[y,n, ]    : a binary target.
#                              target will be created with $(HOSTCC) -o
#     target.o.host-[y,n, ]  : an object target.
#                              target.o will be created with $(HOSTLD) -r -o
#     target.a.host-[y,n, ]  : a static library target.
#                              target.a will be created with $(HOSTAR)
#     target.so.host-[y,n, ] : a shared library target.
#                              target.so will be created with $(HOSTCC) -o -shared
# 
#     subdir-[y,n, ] : subdirectory targets are executed with
#                      $(subdir-y)_makeflags-y $(MAKE) -C $(subdir-y)
#

#
# Available Target Flags
# ----------------------
# 
#     $(target)_makeflags-[y,n, ] : makeflags for target  will be passed to make
#                                   command only for corresponding target.
#     $(target)_files-[y,n, ]     : files must match *.[cho] pattern. *.[ch] files
#                                   will be exemined with $(CC) -M command to
#                                   generate dependency files (*.dep) files. *.[o]
#                                   files will be used only in linking stage. all
#                                   files generated with make command will be
#                                   removed with $(RM) command.
#     $(target)_cflags-[y,n, ]    : cflags will be added to global $(CFLAGS) for
#                                   corresponding target only.
#     $(target)_cppflags-[y,n, ]  : cppflags will be added to global $(CPPFLAGS)
#                                   for corresponding target only.
#     $(target)_includes-[y,n, ]  : a '-I' will be added to all words in includes
#                                   flag, and will be used only for corresponding
#                                   target.
#     $(target)_libraries-[y,n, ] : a '-L' will be added to all words in libraries
#                                   flag, and will be used only for corresponding
#                                   target.
#     $(target)_ldflags-[y,n, ]   : ldflags will be added to gloabal $(LDFLAGS) for
#                                   corresponding target only.
#     $(target)_depends-[y,n, ]   : all words in depends flag will be added to
#                                   prerequisite's list.
#

TOPDIR ?= $(CURDIR)

uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')

override CFLAGS += -Wall -Wextra -pipe -g3 -O2 -fPIC -fsigned-char -fno-strict-aliasing -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE
# -fvisibility=hidden

override CFLAGS += -fno-math-errno -fno-trapping-math
ifeq ($(uname_S),Linux)
	override CFLAGS += -fassociative-math -fno-signed-zeros
endif

ifeq ($(uname_S),Linux)
	override CFLAGS += -D__LINUX__=1
endif
ifeq ($(uname_S),Darwin)
	override CFLAGS += -D__DARWIN__=1
	override CFLAGS += -I/opt/local/include
	override LDOPTS += -keep_private_externs
endif

MAKE       := + CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)" TOPDIR=$(TOPDIR) uname_S=$(uname_S) $(MAKE) --no-print-directory

CC         := $(CROSS_COMPILE_PREFIX)gcc $(SYSROOT)
CPP        := $(CROSS_COMPILE_PREFIX)g++ $(SYSROOT)
LD         := $(CROSS_COMPILE_PREFIX)ld
AR         := $(CROSS_COMPILE_PREFIX)ar rcs
RANLIB     := $(CROSS_COMPILE_PREFIX)ranlib
STRIP      := $(CROSS_COMPILE_PREFIX)strip -sx

HOSTCC     := gcc
HOSTCPP    := g++
HOSTLD     := ld
HOSTAR     := ar rcs
HOSTRANLIB := ranlib
HOSTSTRIP  := strip

SED        := sed

CD         := cd
CP         := cp -rf
RM         := rm -rf
MKDIR      := mkdir -p

#WIDGETC    := widgetc

all:

ifneq ($(V)$(VERBOSE),)
    verbose := ver
    Q = 
else
    verbose := pur
    Q = @
endif

pur_objects = $(CURDIR)/$$@
#pur_objects = $$(subst $(TOPDIR)/,,$$(subst /.$1,/$1,$(CURDIR)/$$@))
#pur_objects = $$(subst .$1/,,$$@)

#
# PUR
#
pur_disp_depend.c         = echo "  DEP        $(pur_objects)"
pur_disp_compile.c        = echo "  CC         $(pur_objects)"
pur_disp_link.c           = echo "  LINK       $(pur_objects)"
pur_disp_link_so.c        = echo "  LINKSO     $(pur_objects)"

pur_disp_depend.cpp       = echo "  DEP        $(pur_objects)"
pur_disp_compile.cpp      = echo "  CPP        $(pur_objects)"
pur_disp_link.cpp         = echo "  LINK       $(pur_objects)"
pur_disp_link_so.cpp      = echo "  LINKSO     $(pur_objects)"

pur_disp_depend.c.host    = echo "  HOSTDEP    $(pur_objects)"
pur_disp_compile.c.host   = echo "  HOSTCC     $(pur_objects)"
pur_disp_link.c.host      = echo "  HOSTLINK   $(pur_objects)"
pur_disp_link_so.c.host   = echo "  HOSTLINKSO $(pur_objects)"

pur_disp_depend.cpp.host  = echo "  HOSTDEP    $(pur_objects)"
pur_disp_compile.cpp.host = echo "  HOSTCPP     $(pur_objects)"
pur_disp_link.cpp.host    = echo "  HOSTLINK   $(pur_objects)"
pur_disp_link_so.cpp.host = echo "  HOSTLINKSO $(pur_objects)"

pur_disp_ar               = echo "  AR         $(pur_objects)"
pur_disp_ranlib           = echo "  RANLIB     $(pur_objects)"
pur_disp_ld               = echo "  LD         $(pur_objects)"

pur_disp_ld.host          = echo "  HOSTLD     $(pur_objects)"

pur_disp_cp               = echo "  CP         $(pur_objects)"
pur_disp_mkdir            = echo "  MKDIR      $(pur_objects)"
pur_disp_clean            = echo "  CLEAN      $$(subst _clean,,$(pur_objects))"

pur_disp_widgetc          = echo "  WIDGETC    $(pur_objects)"

#
# VER
#
ver_disp_depend.c         = echo "$(subst ",\",$(cmd_depend.c))"
ver_disp_compile.c        = echo "$(subst ",\",$(cmd_compile.c))"
ver_disp_link.c           = echo "$(subst ",\",$(cmd_link.c))"
ver_disp_link_so.c        = echo "$(subst ",\",$(cmd_link_so.c))"

ver_disp_depend.cpp       = echo "$(subst ",\",$(cmd_depend.cpp))"
ver_disp_compile.cpp      = echo "$(subst ",\",$(cmd_compile.cpp))"
ver_disp_link.cpp         = echo "$(subst ",\",$(cmd_link.cpp))"
ver_disp_link_so.cpp      = echo "$(subst ",\",$(cmd_link_so.cpp))"

ver_disp_depend.c.host    = echo "$(subst ",\",$(cmd_depend.c.host))"
ver_disp_compile.c.host   = echo "$(subst ",\",$(cmd_compile.c.host))"
ver_disp_link.c.host      = echo "$(subst ",\",$(cmd_link.c.host))"
ver_disp_link_so.c.host   = echo "$(subst ",\",$(cmd_link_so.c.host))"

ver_disp_depend.cpp.host  = echo "$(subst ",\",$(cmd_depend.cpp.host))"
ver_disp_compile.cpp.host = echo "$(subst ",\",$(cmd_compile.cpp.host))"
ver_disp_link.cpp.host    = echo "$(subst ",\",$(cmd_link.cpp.host))"
ver_disp_link_so.cpp.host = echo "$(subst ",\",$(cmd_link_so.cpp.host))"

ver_disp_ar               = echo "$(subst ",\",$(cmd_ar))"
ver_disp_ranlib           = echo "$(subst ",\",$(cmd_ranlib))"
ver_disp_ld               = echo "$(subst ",\",$(cmd_ld))"

ver_disp_ld.host          = echo "$(subst ",\",$(cmd_ld.host))"

ver_disp_cp               = echo "$(subst ",\",$(cmd_cp))"
ver_disp_mkdir            = echo "$(subst ",\",$(cmd_mkdir))"
ver_disp_clean            = echo "$(subst ",\",$(cmd_clean) $1 .$1 $$@.cmd)"

ver_disp_widgetc          = echo "$(subst ",\",$(cmd_widgetc))"

#
# DISP
#
disp_depend.c         = $($(verbose)_disp_depend.c)
disp_compile.c        = $($(verbose)_disp_compile.c)
disp_link.c           = $($(verbose)_disp_link.c)
disp_link_so.c        = $($(verbose)_disp_link_so.c)

disp_depend.cpp       = $($(verbose)_disp_depend.cpp)
disp_compile.cpp      = $($(verbose)_disp_compile.cpp)
disp_link.cpp         = $($(verbose)_disp_link.cpp)
disp_link_so.cpp      = $($(verbose)_disp_link_so.cpp)

disp_depend.c.host    = $($(verbose)_disp_depend.c.host)
disp_compile.c.host   = $($(verbose)_disp_compile.c.host)
disp_link.c.host      = $($(verbose)_disp_link.c.host)
disp_link_so.c.host   = $($(verbose)_disp_link_so.c.host)

disp_depend.cpp.host  = $($(verbose)_disp_depend.cpp.host)
disp_compile.cpp.host = $($(verbose)_disp_compile.cpp.host)
disp_link.cpp.host    = $($(verbose)_disp_link.cpp.host)
disp_link_so.cpp.host = $($(verbose)_disp_link_so.cpp.host)

disp_ar               = $($(verbose)_disp_ar)
disp_ranlib           = $($(verbose)_disp_ranlib)
disp_ld               = $($(verbose)_disp_ld)

disp_ld.host          = $($(verbose)_disp_ld.host)

disp_cp               = $($(verbose)_disp_cp)
disp_mkdir            = $($(verbose)_disp_mkdir)
disp_clean            = $($(verbose)_disp_clean)

disp_widgetc          = $($(verbose)_disp_widgetc)

#
# _CMD
#
_cmd_depend.c       = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) \
                      $($1_includes) -M $$< | $(SED) 's,\($$*\.o\) *:,.$1/\1 \
                      $$@: ,' > $$@
_cmd_compile.c      = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) \
                      $($1_includes) -c -o $$@ $$<
_cmd_link.c         = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                      $($1_ldflags) $(LDFLAGS)
_cmd_link_so.c      = $(CC) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                      $($1_ldflags) $(LDFLAGS) -shared

_cmd_depend.c.host  = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) \
                      $($1_cppflags) $($1_includes) -M $$< | $(SED) \
                      's,\($$*\.o\) *:,.$1/\1 $$@: ,' > $$@
_cmd_compile.c.host = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_cflags) \
                      $($1_cppflags) $($1_includes) -c -o $$@ $$<
_cmd_link.c.host    = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                      $($1_ldflags) $(LDFLAGS)
_cmd_link_so.c.host = $(HOSTCC) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                      $($1_ldflags) $(LDFLAGS) -shared

_cmd_depend.cpp       = $(CPP) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) \
                        $($1_includes) -M $$< | $(SED) 's,\($$*\.o\) *:,.$1/\1 \
                        $$@: ,' > $$@
_cmd_compile.cpp      = $(CPP) $(CFLAGS) $(CPPFLAGS) $($1_cflags) $($1_cppflags) \
                        $($1_includes) -c -o $$@ $$<
_cmd_link.cpp         = $(CPP) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                        $($1_ldflags) $(LDFLAGS)
_cmd_link_so.cpp      = $(CPP) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                        $($1_ldflags) $(LDFLAGS) -shared

_cmd_depend.cpp.host  = $(HOSTCPP) $(CFLAGS) $(CPPFLAGS) $($1_cflags) \
                        $($1_cppflags) $($1_includes) -M $$< | $(SED) \
                        's,\($$*\.o\) *:,.$1/\1 $$@: ,' > $$@
_cmd_compile.cpp.host = $(HOSTCPP) $(CFLAGS) $(CPPFLAGS) $($1_cflags) \
                        $($1_cppflags) $($1_includes) -c -o $$@ $$<
_cmd_link.cpp.host    = $(HOSTCPP) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                        $($1_ldflags) $(LDFLAGS)
_cmd_link_so.cpp.host = $(HOSTCPP) $(CFLAGS) $(CPPFLAGS) $($1_libraries) -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^)) \
                        $($1_ldflags) $(LDFLAGS) -shared

_cmd_ar               = $(AR) $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^))
_cmd_ranlib           = $(RANLIB) $$@
_cmd_ld               = $(LD) $(LDOPTS) -r -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^))

_cmd_ld.host          = $(HOSTLD) $(LDOPTS) -r -o $$@ $$(subst __FORCE,,$$(subst Makefile,,$$^))

_cmd_cp               = $(CP) $$< $$@
_cmd_mkdir            = $(MKDIR) $$@
_cmd_clean            = $(RM)

_cmd_widgetc          = $(CD) .$1; $(WIDGETC) -f ../$$< -o $$(subst .xws,,$$<)

#
# CMD
#
cmd_depend.c         = echo "$(_cmd_depend.c)" > $$@.cmd       ; \
                       $(_cmd_depend.c)
cmd_compile.c        = echo "$(_cmd_compile.c)" > $$@.cmd      ; \
                       $(_cmd_compile.c)
cmd_link.c           = echo "$(_cmd_link.c)" > $$@.cmd         ; \
                       $(_cmd_link.c)
cmd_link_so.c        = echo "$(_cmd_link_so.c)" > $$@.cmd      ; \
                       $(_cmd_link_so.c)

cmd_depend.c.host    = echo "$(_cmd_depend.c.host)" > $$@.cmd  ; \
                       $(_cmd_depend.c.host)
cmd_compile.c.host   = echo "$(_cmd_compile.c.host)" > $$@.cmd ; \
                       $(_cmd_compile.c.host)
cmd_link.c.host      = echo "$(_cmd_link.c.host)" > $$@.cmd    ; \
                       $(_cmd_link.c.host)
cmd_link_so.c.host   = echo "$(_cmd_link_so.c.host)" > $$@.cmd ; \
                       $(_cmd_link_so.c.host)

cmd_depend.cpp       = echo "$(_cmd_depend.cpp)" > $$@.cmd       ; \
                       $(_cmd_depend.cpp)
cmd_compile.cpp      = echo "$(_cmd_compile.cpp)" > $$@.cmd      ; \
                       $(_cmd_compile.cpp)
cmd_link.cpp         = echo "$(_cmd_link.cpp)" > $$@.cmd         ; \
                       $(_cmd_link.cpp)
cmd_link_so.cpp      = echo "$(_cmd_link_so.cpp)" > $$@.cmd      ; \
                       $(_cmd_link_so.cpp)

cmd_depend.cpp.host  = echo "$(_cmd_depend.cpp.host)" > $$@.cmd  ; \
                       $(_cmd_depend.cpp.host)
cmd_compile.cpp.host = echo "$(_cmd_compile.cpp.host)" > $$@.cmd ; \
                       $(_cmd_compile.cpp.host)
cmd_link.cpp.host    = echo "$(_cmd_link.cpp.host)" > $$@.cmd    ; \
                       $(_cmd_link.cpp.host)
cmd_link_so.cpp.host = echo "$(_cmd_link_so.cpp.host)" > $$@.cmd ; \
                       $(_cmd_link_so.cpp.host)

cmd_ar               = echo "$(_cmd_ar)" > $$@.cmd             ; $(_cmd_ar)
cmd_ranlib           = echo "$(_cmd_ranlib)" >> $$@.cmd        ; $(_cmd_ranlib)
cmd_ld               = echo "$(_cmd_ld)" > $$@.cmd             ; $(_cmd_ld)

cmd_ld.host          = echo "$(_cmd_ld.host)" > $$@.cmd        ; $(_cmd_ld.host)

cmd_cp               = $(_cmd_cp)
cmd_mkdir            = $(_cmd_mkdir)
cmd_clean            = echo "$(_cmd_clean) $1 .$1" > $$@.cmd   ; $(_cmd_clean)

cmd_widgetc          = echo "$(_cmd_widgetc)" > $$@.cmd        ; $(_cmd_widgetc)

#
# DO
#
do_depend.c         = @$(disp_depend.c)         ; $(MKDIR) $$(dir $$@); $(cmd_depend.c)
do_compile.c        = @$(disp_compile.c)        ; $(MKDIR) $$(dir $$@); $(cmd_compile.c)
do_link.c           = @$(disp_link.c)           ; $(MKDIR) $$(dir $$@); $(cmd_link.c)
do_link_so.c        = @$(disp_link_so.c)        ; $(MKDIR) $$(dir $$@); $(cmd_link_so.c)

do_depend.c.host    = @$(disp_depend.c.host)    ; $(MKDIR) $$(dir $$@); $(cmd_depend.c.host)
do_compile.c.host   = @$(disp_compile.c.host)   ; $(MKDIR) $$(dir $$@); $(cmd_compile.c.host)
do_link.c.host      = @$(disp_link.c.host)      ; $(MKDIR) $$(dir $$@); $(cmd_link.c.host)
do_link_so.c.host   = @$(disp_link_so.c.host)   ; $(MKDIR) $$(dir $$@); $(cmd_link_so.c.host)

do_depend.cpp       = @$(disp_depend.cpp)       ; $(MKDIR) $$(dir $$@); $(cmd_depend.cpp)
do_compile.cpp      = @$(disp_compile.cpp)      ; $(MKDIR) $$(dir $$@); $(cmd_compile.cpp)
do_link.cpp         = @$(disp_link.cpp)         ; $(MKDIR) $$(dir $$@); $(cmd_link.cpp)
do_link_so.cpp      = @$(disp_link_so.cpp)      ; $(MKDIR) $$(dir $$@); $(cmd_link_so.cpp)

do_depend.cpp.host  = @$(disp_depend.cpp.host)  ; $(MKDIR) $$(dir $$@); $(cmd_depend.cpp.host)
do_compile.cpp.host = @$(disp_compile.cpp.host) ; $(MKDIR) $$(dir $$@); $(cmd_compile.cpp.host)
do_link.cpp.host    = @$(disp_link.cpp.host)    ; $(MKDIR) $$(dir $$@); $(cmd_link.cpp.host)
do_link_so.cpp.host = @$(disp_link_so.cpp.host) ; $(MKDIR) $$(dir $$@); $(cmd_link_so.cpp.host)

do_ar               = @$(disp_ar)               ; $(MKDIR) $$(dir $$@); $(cmd_ar)
do_ranlib           = @$(disp_ranlib)           ; $(MKDIR) $$(dir $$@); $(cmd_ranlib)
do_ld               = @$(disp_ld)               ; $(MKDIR) $$(dir $$@); $(cmd_ld)

do_ld.host          = @$(disp_ld.host)          ; $(MKDIR) $$(dir $$@); $(cmd_ld.host)

do_cp               = @$(disp_cp)               ; $(MKDIR) $$(dir $$@); $(cmd_cp)
do_mkdir            = @$(disp_mkdir)            ; $(MKDIR) $$(dir $$@); $(cmd_mkdir)
do_clean            = @$(disp_clean)            ; $(MKDIR) $$(dir $$@); $(cmd_clean)

do_widgetc          = @$(disp_widgetc)          ; $(MKDIR) $$(dir $$@); $(cmd_widgetc)

#
# Functions
#

define target-defaults_base
    $(eval $1_sources_c    = $(filter %.c,$2))
    $(eval $1_headers_c    = $(filter %.h,$2))
    $(eval $1_sources_cc   = $(filter %.cc,$2))
    $(eval $1_sources_cpp  = $(filter %.cpp,$2))
    $(eval $1_headers_cpp  = $(filter %.hh,$2))
    $(eval $1_headers_cpp += $(filter %.hpp,$2))
    $(eval $1_wsources     = $(addprefix .$1/, $(subst .xws,_xml.c,$(filter %.xws,$2))))
    $(eval $1_wheaders     = $(addprefix .$1/, $(subst .xws,_xml.h,$(filter %.xws,$2))))
    $(eval $1_objects_c    = $(addprefix .$1/, $(subst .c,.o,$($1_sources_c))))
    $(eval $1_objects_cc   = $(addprefix .$1/, $(subst .cc,.o,$($1_sources_cc))))
    $(eval $1_objects_cpp  = $(addprefix .$1/, $(subst .cpp,.o,$($1_sources_cpp))))
    $(eval $1_wobjects     = $(subst .c,.o,$($1_wsources)))
    $(eval $1_eobjects     = $(subst ",,$(filter %.o,$2)))
    $(eval $1_eobjects    += $(subst ",,$(filter %.lib,$2)))
    $(eval $1_depends_c    = $(addprefix .$1/, $(subst .c,.dep,$($1_sources_c))))
    $(eval $1_depends_cc   = $(addprefix .$1/, $(subst .cc,.dep,$($1_sources_cc))))
    $(eval $1_depends_cpp  = $(addprefix .$1/, $(subst .cpp,.dep,$($1_sources_cpp))))
    $(eval $1_cflags       = $($1_cflags-y))
    $(eval $1_cppflags     = $($1_cppflags-y))
    $(eval $1_includes     = $(addprefix -I, $($1_includes-y)))
    $(eval $1_libraries    = $(addprefix -L, $($1_libraries-y)))
    $(eval $1_ldflags      = $($1_ldflags-y))
    $(eval $1_directories  = $(sort $(dir .$1/ $($1_objects_c) $($1_objects_cpp) $($1_wobjects))))
    
    targets-blds += $1
    targets-objs += $($1_objects_c)
    targets-objs += $($1_objects_cc)
    targets-objs += $($1_objects_cpp)
    targets-deps += $($1_depends_c)
    targets-deps += $($1_depends_cc)
    targets-deps += $($1_depends_cpp)
    targets-clns += $1_clean
    
    $($1_directories):
	$(do_mkdir)
    
    $($1_depends_c): $($1_headers_c) $($1_wheaders) Makefile
    $($1_depends_cpp): $($1_wheaders) Makefile

    $($1_wsources): .$1/%_xml.c: %.xws
	$(do_widgetc)
    
    $($1_wheaders): .$1/%_xml.h: %.xws
	$(do_widgetc)

    $1: $($1_depends-y) Makefile
    $($1_objects_c): $($1_depends-y) Makefile
    $($1_objects_cc): $($1_depends-y) Makefile
    $($1_objects_cpp): $($1_depends-y) Makefile
    
    $1: .$1/$1 Makefile
	$(do_cp)
    
    .$1/$1: $($1_wobjects) $($1_objects_c) $($1_objects_cc) $($1_objects_cpp) $($1_eobjects) Makefile

    $1_clean: __FORCE
	$(do_clean) $1 .$1 $$@.cmd $1.dSYM
endef

define target-defaults
    $(eval $(call target-defaults_base,$1,$2))
    
    $($1_depends_c): .$1/%.dep: %.c  Makefile
	$(do_depend.c)

    $($1_depends_cc): .$1/%.dep: %.cc  Makefile
	$(do_depend.cpp)

    $($1_depends_cpp): .$1/%.dep: %.cpp  Makefile
	$(do_depend.cpp)

    $($1_wobjects): .$1/%.o: .$1/%.c  Makefile
	$(do_compile.c)

    $($1_objects_c): .$1/%.o: %.c Makefile
	$(do_compile.c)

    $($1_objects_cc): .$1/%.o: %.cc  Makefile
	$(do_compile.cpp)

    $($1_objects_cpp): .$1/%.o: %.cpp  Makefile
	$(do_compile.cpp)
endef

define target.host-defaults
    $(eval $(call target-defaults_base,$1,$2))

    $($1_depends_c): .$1/%.dep: %.c Makefile
	$(do_depend.c.host)

    $($1_depends_cc): .$1/%.dep: %.cc Makefile
	$(do_depend.cpp.host)

    $($1_depends_cpp): .$1/%.dep: %.cpp Makefile
	$(do_depend.cpp.host)

    $($1_wobjects): .$1/%.o: .$1/%.c Makefile
	$(do_compile.c)

    $($1_objects_c): .$1/%.o: %.c Makefile
	$(do_compile.c.host)

    $($1_objects_cc): .$1/%.o: %.cc Makefile
	$(do_compile.cpp.host)

    $($1_objects_cpp): .$1/%.o: %.cpp Makefile
	$(do_compile.cpp.host)
endef

define target-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
ifeq ($($1_sources_cpp),)
	$(do_link.c)
else
	$(do_link.cpp)
endif
endef

define target.host-variables
    $(eval $(call target.host-defaults,$1,$2))
    
    .$1/$1:
	$(do_link.c.host)
endef

define target.so-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_link_so.c)
endef

define target.so.host-variables
    $(eval $(call target.host-defaults,$1,$2))

    .$1/$1:
	$(do_link_so.c.host)
endef

define target.a-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_ar)
	$(do_ranlib)
endef

define target.a.host-variables
    $(eval $(call target.host-defaults,$1,$2))

    .$1/$1:
	$(do_ar.host)
	$(do_ranlib.host)
endef

define target.o-variables
    $(eval $(call target-defaults,$1,$2))

    .$1/$1:
	$(do_ld)
endef

define target.o.host-variables
    $(eval $(call target.host-defaults,$1,$2))
    
    .$1/$1:
	$(do_ld.host)
endef

define target_empty-defaults
    targets-empty += $1
    
    $(addsuffix _clean, $1): __FORCE
	$(do_clean) $1 .$1 $$@.cmd
endef

define subdir_empty-defaults
    $(addsuffix _$2, $1): __FORCE
	@$($1_makeflags-y) $(MAKE) -C $$(subst _$2,,$$@) $2
endef

define subdir-defaults
    subdirs += $1
    
    $1: $1_all

    $(addsuffix _all, $1): $($1_depends-y) __FORCE
	@+ $($1_makeflags-y) $(MAKE) -C $$(subst _all,,$$@) all

    $(addsuffix _dist, $1): $($1_depends-y) __FORCE
	@+ $($1_makeflags-y) $(MAKE) -C $$(subst _dist,,$$@) dist

    $(addsuffix _clean, $1): __FORCE
	@+ $($1_makeflags-y) $(MAKE) -C $$(subst _clean,,$$@) clean
endef

#
# Definitions
#

# generate target variables

$(eval $(foreach T,$(target-y), $(eval $(call target-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.o-y), $(eval $(call target.o-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.o-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.o-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.a-y), $(eval $(call target.a-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.a-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.a-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.so-y), $(eval $(call target.so-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.so-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.so-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.host-y), $(eval $(call target.host-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.host-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.host-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.o.host-y), $(eval $(call target.o.host-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.o.host-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.o.host-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.so.host-y), $(eval $(call target.so.host-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.so.host-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.so.host-),  $(eval $(call target_empty-defaults,$T))))

$(eval $(foreach T,$(target.a.host-y), $(eval $(call target.a.host-variables,$T,$($T_files-y)))))
$(eval $(foreach T,$(target.a.host-n), $(eval $(call target_empty-defaults,$T))))
$(eval $(foreach T,$(target.a.host-),  $(eval $(call target_empty-defaults,$T))))

# generate subdir targets

$(eval $(foreach S,$(subdir-y),$(eval $(call subdir-defaults,$S))))
$(eval $(foreach S,$(subdir-n),$(eval $(call subdir_empty-defaults,$S,clean))))
$(eval $(foreach S,$(subdir-),$(eval $(call subdir_empty-defaults,$S,clean))))

# generic tags

all: $(addsuffix _all, $(subdirs))
all: $(targets-blds)
all: __FORCE

dist: $(addsuffix _dist, $(subdirs))
dist: all
dist: __FORCE

clean: $(addsuffix _clean, $(subdir-y) $(subdir-n) $(subdir-))
clean: $(targets-clns)
clean: $(addsuffix _clean, $(targets-empty))
clean: __FORCE

__FORCE:
	@true

ifneq "$(MAKECMDGOALS)" "clean"
ifneq "$(MAKECMDGOALS)" "linux"
    -include $(targets-deps)
endif
endif
